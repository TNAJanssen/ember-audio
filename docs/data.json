{
    "project": {
        "name": "ember-audio",
        "description": "An Ember addon that makes working with the Web Audio API super EZ",
        "version": "0.0.0.05d205db"
    },
    "files": {
        "addon/classes/beat-track.js": {
            "name": "addon/classes/beat-track.js",
            "modules": {},
            "classes": {
                "BeatTrack": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/beat.js": {
            "name": "addon/classes/beat.js",
            "modules": {},
            "classes": {
                "Beat": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/connection.js": {
            "name": "addon/classes/connection.js",
            "modules": {},
            "classes": {
                "Connection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/index.js": {
            "name": "addon/classes/index.js",
            "modules": {
                "AudioHelpers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/note.js": {
            "name": "addon/classes/note.js",
            "modules": {
                "MusicalConcepts": 1
            },
            "classes": {
                "Note": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/sampler.js": {
            "name": "addon/classes/sampler.js",
            "modules": {
                "Audio": 1
            },
            "classes": {
                "Sampler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/sound.js": {
            "name": "addon/classes/sound.js",
            "modules": {},
            "classes": {
                "Sound": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/track.js": {
            "name": "addon/classes/track.js",
            "modules": {},
            "classes": {
                "Track": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/services/audio.js": {
            "name": "addon/services/audio.js",
            "modules": {
                "AudioService": 1
            },
            "classes": {
                "AudioService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/array-methods.js": {
            "name": "addon/utils/array-methods.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/decode-base64.js": {
            "name": "addon/utils/decode-base64.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/index.js": {
            "name": "addon/utils/index.js",
            "modules": {
                "utils": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/note-methods.js": {
            "name": "addon/utils/note-methods.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/zeroify.js": {
            "name": "addon/utils/zeroify.js",
            "modules": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Audio": {
            "name": "Audio",
            "submodules": {},
            "elements": {},
            "classes": {
                "BeatTrack": 1,
                "Sampler": 1,
                "Sound": 1,
                "Track": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/classes/track.js",
            "line": 16,
            "description": "Provides classes that are capable of interacting with the Web Audio API's\nAudioContext."
        },
        "MusicalConcepts": {
            "name": "MusicalConcepts",
            "submodules": {},
            "elements": {},
            "classes": {
                "Beat": 1,
                "Note": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/classes/note.js",
            "line": 15,
            "description": "Provides helper classes that represent musical concepts meant to be used by\nclasses from the Audio module."
        },
        "AudioHelpers": {
            "name": "AudioHelpers",
            "submodules": {},
            "elements": {},
            "classes": {
                "Connection": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/classes/connection.js",
            "line": 15,
            "description": "Provides classes that interact with the Web Audio API indirectly by providing\ndata models for the classes in the Audio module to consume."
        },
        "AudioService": {
            "name": "AudioService",
            "submodules": {},
            "elements": {},
            "classes": {
                "AudioService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/services/audio.js",
            "line": 16,
            "description": "Provides the Audio Service"
        },
        "utils": {
            "name": "utils",
            "submodules": {},
            "elements": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/utils/zeroify.js",
            "line": 1
        }
    },
    "classes": {
        "BeatTrack": {
            "name": "BeatTrack",
            "shortname": "BeatTrack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "addon/classes/beat-track.js",
            "line": 16,
            "description": "An instance of this class has a single \"sound\" (comprised of one or multiple\naudio sources) but provides methods to play that sound repeatedly, mixed with\n\"rests,\" in a rhythmic way. An instance of this class behaves very similarly\nto a \"lane\" on a drum machine.",
            "extends": "Sampler",
            "todo": [
                "need a way to stop a BeatTrack once it's started. Maybe by creating\nthe times in advance and not calling play until it's the next beat in the\nqueue?",
                "beats in beats array should save `active` state when numbeats/duration changes"
            ]
        },
        "Beat": {
            "name": "Beat",
            "shortname": "Beat",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "MusicalConcepts",
            "namespace": "",
            "file": "addon/classes/beat.js",
            "line": 14,
            "description": "This class represents a single \"beat\" for a rhythmic instrument. An instance of this\nclass can be set to `active` or not to facilitate the way that most drum\nmachines work (when a beat is not `active`, the time that it occupies still\nexists, but it does not cause audio to play, effectively resulting in a\n\"rest\"). It provides properties that track when it is played, and when a \"rest\"\nis played in it's place.\n\nThis class does not have the ability to create audio on it's own and is\nexpected be a \"child\" of one of the Sound classes. See it's implementation in\n{{#crossLink \"BeatTrack\"}}BeatTrack{{/crossLink}} for an example.\n\n    // Cannot play audio on it's own.\n    // Must pass in parentPlay and/or parentPlayIn from a parent class.\n    Beat.create({\n      _parentPlayIn: this.playIn.bind(this),\n      _parentPlay: this.play.bind(this),\n    });"
        },
        "Connection": {
            "name": "Connection",
            "shortname": "Connection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AudioHelpers",
            "namespace": "",
            "file": "addon/classes/connection.js",
            "line": 15,
            "description": "This class represents a single connection in a Sound instance's connections\narray. It is mostly just a wrapper around an AudioNode instance. It defines\nsome standards for how to handle the behaviors of different AudioNode types.\nMost connections create their corresponding AudioNode immediately, but some\nAudioNodes are \"throw-away\" and have to be created each time a Sound instance\nis played.\n\nMost properties in this class just define how to go about getting/creating an\nAudioNode instance and setting it on this class' `node` property. Some define\nhow to set properties on the AudioNode instance after it has been created."
        },
        "Note": {
            "name": "Note",
            "shortname": "Note",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "MusicalConcepts",
            "namespace": "",
            "file": "addon/classes/note.js",
            "line": 15,
            "description": "A class that represents a musical note. When a soundfont is created via the\n{{#crossLink \"Audio\"}}Audio Service{{/crossLink}}, an instance of this class\nis created for every musical note that is represented in a soundfont. This\nclass can be used for any collection of Sound instances where each instance\nneeds an awareness of what \"musical note\" it is (i.e. octave, accidental, etc..).\n\nThis class only makes sense when used in the context of a collection, as the\nonly functionality it provides over a\n{{#crossLink \"Sound\"}}Sound{{/crossLink}}, serves to facilitate identification.",
            "extends": "Sound"
        },
        "Sampler": {
            "name": "Sampler",
            "shortname": "Sampler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "addon/classes/sampler.js",
            "line": 10,
            "description": "An instance of the Sampler class behaves just like a Sound, but allows\nmany {{#crossLink \"AudioBuffer\"}}AudioBuffers{{/crossLink}} to exist and\nautomatically alternately plays them (round-robin) each time any of the play\nmethods are called.",
            "todo": [
                "humanize gain and time - should be optional and customizable",
                "loop"
            ]
        },
        "Sound": {
            "name": "Sound",
            "shortname": "Sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "addon/classes/sound.js",
            "line": 21,
            "description": "The Sound class provides the core functionality for\ninteracting with the Web Audio API's AudioContext, and is the base class for\nall other {{#crossLinkModule \"Audio\"}}{{/crossLinkModule}} types. It prepares\nan audio source, provides various methods for interacting with the audio source,\ncreates {{#crossLink \"AudioNode\"}}AudioNodes{{/crossLink}} from the\nconnections array, sets up the necessary connections/routing between them,\nand provides some methods to {{#crossLink \"Sound/play:method\"}}{{/crossLink}}\nand {{#crossLink \"Sound/stop:method\"}}{{/crossLink}} the audio source."
        },
        "Track": {
            "name": "Track",
            "shortname": "Track",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "addon/classes/track.js",
            "line": 16,
            "description": "A class that represents a \"track\" of music, similar in concept to a track on\na CD or an MP3 player. Provides methods for tracking the play position of the\nunderlying {{#crossLink \"AudioBuffer\"}}{{/crossLink}}, and pausing/resuming.",
            "extends": "Sound"
        },
        "AudioService": {
            "name": "AudioService",
            "shortname": "AudioService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AudioService",
            "namespace": "",
            "file": "addon/services/audio.js",
            "line": 16,
            "description": "A {{#crossLink \"Ember.Service\"}}Service{{/crossLink}} that provides methods\nfor interacting with the various\n{{#crossLinkModule \"Audio\"}}{{/crossLinkModule}} classes and the Web Audio\nAPI's {{#crossLink \"AudioContext\"}}{{/crossLink}}. This can be thought of as\nthe \"entrypoint\" to using ember-audio. An application using ember-audio\nshould use this service for all interactions with the Web Audio API.\n\n    // inject into an object\n    Ember.Something.extend({\n      audio: Ember.inject.service()\n    });\n\n    // use\n    loadSound() {\n      return this.get('audio').load('some.mp3').asSound('some-sound');\n    }"
        },
        "utils": {
            "name": "utils",
            "shortname": "utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "utils",
            "namespace": "",
            "file": "addon/utils/zeroify.js",
            "line": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "addon/classes/beat-track.js",
            "line": 33,
            "description": "Determines the number of beats in a BeatTrack instance.",
            "itemtype": "property",
            "name": "numBeats",
            "type": "{number}",
            "class": "BeatTrack",
            "module": "Audio"
        },
        {
            "file": "addon/classes/beat-track.js",
            "line": 41,
            "description": "If specified, Determines length of time, in milliseconds, before isPlaying\nand currentTimeIsPlaying are automatically switched back to false after\nhaving been switched to true for each beat. 100ms is used by default.",
            "itemtype": "property",
            "name": "duration",
            "type": "{number}",
            "default": "100",
            "class": "BeatTrack",
            "module": "Audio"
        },
        {
            "file": "addon/classes/beat-track.js",
            "line": 52,
            "description": "Computed property. An array of Beat instances. The number of Beat instances\nin the array is always the same as the `numBeats` property.",
            "itemtype": "property",
            "name": "beats",
            "type": "{array|Beat}",
            "class": "BeatTrack",
            "module": "Audio"
        },
        {
            "file": "addon/classes/beat-track.js",
            "line": 76,
            "description": "Calls play on all Beat instances in the beats array.",
            "itemtype": "method",
            "name": "playBeats",
            "params": [
                {
                    "name": "bpm",
                    "description": "The tempo at which the beats should be played.",
                    "type": "Number"
                },
                {
                    "name": "noteType",
                    "description": "The (rhythmic) length of each beat. Fractions\nare suggested here so that it's easy to reason about. For example, for\neighth notes, pass in `1/8`.",
                    "type": "Number"
                }
            ],
            "class": "BeatTrack",
            "module": "Audio"
        },
        {
            "file": "addon/classes/beat-track.js",
            "line": 91,
            "description": "Calls play on `active` Beat instances in the beats array. Any beat that\nis not marked active is effectively a \"rest\".",
            "itemtype": "method",
            "name": "playActiveBeats",
            "params": [
                {
                    "name": "bpm",
                    "description": "The tempo at which the beats and rests should be played.",
                    "type": "Number"
                },
                {
                    "name": "noteType",
                    "description": "The (rhythmic) length of each beat/rest. Fractions\nare suggested here so that it's easy to reason about. For example, for\neighth notes, pass in `1/8`.",
                    "type": "Number"
                }
            ],
            "class": "BeatTrack",
            "module": "Audio"
        },
        {
            "file": "addon/classes/beat-track.js",
            "line": 107,
            "description": "The underlying method behind playBeats and playActiveBeats.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_callPlayMethodOnBeats",
            "params": [
                {
                    "name": "method",
                    "description": "The method that should be called on each beat.",
                    "type": "String"
                },
                {
                    "name": "bpm",
                    "description": "The tempo that should be used to calculate the length\nof a beat/rest.",
                    "type": "Number"
                },
                {
                    "name": "noteType",
                    "description": "The (rhythmic) length of each beat/rest that should\nbe used to calculate the length of a beat/rest in seconds.",
                    "type": "Number"
                }
            ],
            "class": "BeatTrack",
            "module": "Audio"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 37,
            "description": "If `active` is `true`, all methods of play will cause this instance to play.\nIf `active` is `false`, the `playIfActive()` and `ifActivePlayIn()`\nmethods will treat this instance as a rest (a timed period of silence).",
            "itemtype": "property",
            "name": "active",
            "type": "{boolean}",
            "class": "Beat",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 47,
            "description": "Whether a Beat instance is currently playing, considering both active and\ninactive beats (rests). When switched to `true`, is automatically returned\nto false after the time specified by the duration property.",
            "itemtype": "property",
            "name": "currentTimeIsPlaying",
            "type": "{boolean}",
            "default": "false",
            "class": "Beat",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 58,
            "description": "Whether a Beat instance is currently playing, considering only active beats.\nWhen switched to `true`, is automatically returned to false after the time\nspecified by the duration property.",
            "itemtype": "property",
            "name": "isPlaying",
            "type": "{boolean}",
            "default": "false",
            "class": "Beat",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 69,
            "description": "On Beat instance instantiation, this property should be set to the parent's\naudioBuffer.duration.",
            "itemtype": "property",
            "name": "_audioBufferDuration",
            "type": "{number|null}",
            "access": "private",
            "tagname": "",
            "class": "Beat",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 79,
            "description": "If specified, Determines length of time, in milliseconds, before isPlaying\nand currentTimeIsPlaying are automatically switched back to false after\nhaving been switched to true. 100ms is used by default.",
            "itemtype": "property",
            "name": "duration",
            "type": "{number}",
            "default": "100",
            "class": "Beat",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 90,
            "description": "Calls it's parent's `playIn()` method directly to play the beat in\n`${offset}` seconds.\n\nisPlaying and currentTimeIsPlaying are both marked true after the provided\noffset has elapsed.",
            "itemtype": "method",
            "name": "playIn",
            "params": [
                {
                    "name": "offset",
                    "description": "Number of seconds from \"now\" that the audio should\nplay.",
                    "type": "Number"
                }
            ],
            "class": "Beat",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 111,
            "description": "If the beat is marked `active`, calls it's parent's `playIn()` method\ndirectly to play the beat in `${offset}` seconds.\n\nIf active, isPlaying is marked true after the provided offset has elapsed.\n\ncurrentTimeIsPlaying is marked true after the provided offset has elapsed,\neven if beat is not active.",
            "itemtype": "method",
            "name": "ifActivePlayIn",
            "params": [
                {
                    "name": "offset",
                    "description": "Number of seconds from \"now\" that the audio should\nplay.",
                    "type": "Number"
                }
            ],
            "class": "Beat",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 136,
            "description": "Calls it's parent's `play()` method directly to play the beat immediately.\n\nisPlaying and currentTimeIsPlaying are both immediately marked true.",
            "itemtype": "method",
            "name": "play",
            "class": "Beat",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 149,
            "description": "If `active`, calls it's parent's `play()` method directly to play the beat\nimmediately.\n\nIf `active`, isPlaying is immediately marked true.\n\ncurrentTimeIsPlaying is immediately marked true, even if beat is not active.",
            "itemtype": "method",
            "name": "playIfActive",
            "class": "Beat",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 168,
            "description": "Sets `isPlaying` to `true` and sets up a timer that sets `isPlaying` back\nto false after `duration` has elapsed.",
            "itemtype": "method",
            "name": "_markPlaying",
            "access": "private",
            "tagname": "",
            "class": "Beat",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 180,
            "description": "Sets `currentTimeIsPlaying` to `true` and sets up a timer that sets\n`currentTimeIsPlaying` back to false after `duration` has elapsed.",
            "itemtype": "method",
            "name": "_markCurrentTimePlaying",
            "access": "private",
            "tagname": "",
            "class": "Beat",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/connection.js",
            "line": 31,
            "description": "The name of the connection. This is the name that can be used to\nget an AudioNode instance via the\n{{#crossLink \"Sound/getNodeFrom:method\"}}{{/crossLink}} method.",
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "class": "Connection",
            "module": "AudioHelpers"
        },
        {
            "file": "addon/classes/connection.js",
            "line": 41,
            "description": "If an AudioNode instance already exists and is accessible to the Sound\ninstance, the path to the node can be placed here. If this value is\nspecified, all options except `name` become useless. If `node` is specified,\nit will override this option and the AudioNode supplied to `node` will be\nused.",
            "example": [
                "\n    // Uses the Audio Node instance from:\n    // soundInstance.get('audioContext.destination')\n    {\n      name: 'destination',\n      path: 'audioContext.destination'\n    }"
            ],
            "itemtype": "property",
            "name": "path",
            "type": "{string}",
            "class": "Connection",
            "module": "AudioHelpers"
        },
        {
            "file": "addon/classes/connection.js",
            "line": 61,
            "description": "If `createCommand` is specified, the object at this location (relative to\nthe Sound instance) will be used as the \"source\" of the `createCommand`.",
            "example": [
                "\n    // Creates the AudioNode by calling:\n    // this.get('audioContext')[createCommand]();\n    {\n      source: 'audioContext'\n      createCommand: createGain\n    }"
            ],
            "itemtype": "property",
            "name": "source",
            "type": "{string}",
            "class": "Connection",
            "module": "AudioHelpers"
        },
        {
            "file": "addon/classes/connection.js",
            "line": 78,
            "description": "If `source` is specified, this method will be called on the object that was\nretrieved from `source`. The value returned from this method is set on the\n`node` property.",
            "example": [
                "\n    // Creates the AudioNode by calling:\n    // this.get('audioContext')[createCommand]();\n    {\n      source: 'audioContext'\n      createCommand: createGain\n    }"
            ],
            "itemtype": "property",
            "name": "createCommand",
            "type": "{string}",
            "class": "Connection",
            "module": "AudioHelpers"
        },
        {
            "file": "addon/classes/connection.js",
            "line": 96,
            "description": "An array of POJOs that specify properties that need to be set on a node\nwhen any of the {{#crossLink \"Sound/play:method\"}}{{/crossLink}} methods\nare called. For instance, an\n{{#crossLink \"AudioBufferSourceNode\"}}{{/crossLink}} must be created at\nplay time, because they can only be played once and then they are\nimmediately thrown away.\n\nValid keys are:\n\n`attrNameOnNode` {string} Determines which property on the node should be\nset to the value. This can be a nested accessor (ie. `'gain.value'`).\n\n`relativePath` {string} Determines where on `this` (the Sound instance) to\nget the value. This can be a nested accessor (ie. `'gainNode.gain.value'`).\n\n`value` {mixed} The direct value to set. If used along with `relativePath`,\nthis will act as a default value and the value at `relativePath` will take\nprecedence.",
            "example": [
                "\n    // Causes gainNode.gain.value = soundInstance.get('gainValue') || 1;\n    // to be called at play-time\n\n    {\n      name: 'gainNode',\n      onPlaySetAttrsOnNode: [\n        {\n          attrNameOnNode: 'gain.value',\n          relativePath: 'gainValue',\n          value: 1\n        }\n      ]\n    }"
            ],
            "itemtype": "property",
            "name": "onPlaySetAttrsOnNode",
            "type": "{array}",
            "class": "Connection",
            "module": "AudioHelpers"
        },
        {
            "file": "addon/classes/connection.js",
            "line": 136,
            "description": "This is the main attraction here in connection-land. All the other\nproperties in the Connection class exist to create or mutate this property.\nHouses an AudioNode instance that will be used by an instance of the Sound\nclass.\n\nIf this property is set directly, all of the other properties on this class\n(except `name`) are rendered useless.",
            "itemtype": "property",
            "name": "node",
            "type": "{AudioNode}",
            "class": "Connection",
            "module": "AudioHelpers"
        },
        {
            "file": "addon/classes/connection.js",
            "line": 150,
            "description": "If this is true, the AudioNode will be created every time the consuming\nSound instance is played.",
            "itemtype": "property",
            "name": "createdOnPlay",
            "type": "{boolean}",
            "default": "false",
            "class": "Connection",
            "module": "AudioHelpers"
        },
        {
            "file": "addon/classes/connection.js",
            "line": 160,
            "description": "If any of the array types are null on init, set them to an\nEmber.MutableArray",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_initArrays",
            "class": "Connection",
            "module": "AudioHelpers"
        },
        {
            "file": "addon/classes/note.js",
            "line": 31,
            "description": "For note `Ab5`, this would be `A`. Value should be set on instantiation.",
            "itemtype": "property",
            "name": "letter",
            "type": "{string}",
            "class": "Note",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/note.js",
            "line": 39,
            "description": "For note `Ab5`, this would be `b`. Value should be set on instantiation.",
            "itemtype": "property",
            "name": "accidental",
            "type": "{string}",
            "class": "Note",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/note.js",
            "line": 47,
            "description": "For note `Ab5`, this would be `5`. Value should be set on instantiation.",
            "itemtype": "property",
            "name": "octave",
            "type": "{string}",
            "class": "Note",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/note.js",
            "line": 55,
            "description": "Computed property. Value is `${letter}${octave}` or\n`${letter}${accidental}${octave}` if accidental exists.",
            "itemtype": "property",
            "name": "identifier",
            "type": "{string}",
            "class": "Note",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/note.js",
            "line": 79,
            "description": "Computed property. Value is `${letter}` or `${letter}${accidental}` if\naccidental exists.",
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "class": "Note",
            "module": "MusicalConcepts"
        },
        {
            "file": "addon/classes/sampler.js",
            "line": 23,
            "description": "Determines the gain applied to each sample.",
            "itemtype": "property",
            "name": "gain",
            "type": "{number}",
            "default": "1",
            "class": "Sampler",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sampler.js",
            "line": 32,
            "description": "Determines the stereo pan position of each sample.",
            "itemtype": "property",
            "name": "pan",
            "type": "{number}",
            "default": "0",
            "class": "Sampler",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sampler.js",
            "line": 41,
            "description": "Temporary storage for the iterable that comes from the _sounds Set.\nThis iterable is meant to be replaced with a new copy every time it reaches\nit's end, resulting in an infinite stream of Sound instances.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_soundIterator",
            "type": "{Iterator}",
            "class": "Sampler",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sampler.js",
            "line": 53,
            "description": "Acts as a register for loaded Sound instances. Set on instantiation.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_sounds",
            "type": "{Set|Sound}",
            "class": "Sampler",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sampler.js",
            "line": 62,
            "description": "Gets the next Sound and plays it immediately.",
            "itemtype": "method",
            "name": "play",
            "class": "Sampler",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sampler.js",
            "line": 71,
            "description": "Gets the next Sound and plays it after the specified offset has elapsed.",
            "itemtype": "method",
            "name": "playIn",
            "params": [
                {
                    "name": "seconds",
                    "description": "Number of seconds from \"now\" that the next Sound\nshould be played.",
                    "type": "Number"
                }
            ],
            "class": "Sampler",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sampler.js",
            "line": 83,
            "description": "Gets the next Sound and plays it at the specified moment in time. A\n\"moment in time\" is measured in seconds from the moment that the\n{{#crossLink \"AudioContext\"}}{{/crossLink}} was instantiated.",
            "params": [
                {
                    "name": "time",
                    "description": "The moment in time (in seconds, relative to the\n{{#crossLink \"AudioContext\"}}AudioContext's{{/crossLink}} \"beginning of\ntime\") when the next Sound should be played.",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "playAt",
            "class": "Sampler",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sampler.js",
            "line": 98,
            "description": "Gets _soundIterator and returns it's next value. If _soundIterator has\nreached it's end, replaces _soundIterator with a fresh copy from _sounds\nand returns the first value from that.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getNextSound",
            "return": {
                "description": "",
                "type": "Sound"
            },
            "class": "Sampler",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sampler.js",
            "line": 127,
            "description": "Applies the `gain` and `pan` properties from the Sampler instance to a\nSound instance and returns the Sound instance.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_setGainAndPan",
            "return": {
                "description": "The input sound after having it's gain and pan set",
                "type": "Sound"
            },
            "class": "Sampler",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 35,
            "description": "When using the {{#crossLink \"Audio-Service\"}}{{/crossLink}}, The name that\nthis Sound instance is registered as on it's parent register.",
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 44,
            "description": "The AudioBuffer instance that provides audio data to the bufferSource connection.",
            "itemtype": "property",
            "name": "audioBuffer",
            "type": "{AudioBuffer}",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 52,
            "description": "The parent\n[AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)\ninstance that all audio events are occurring within. It is useful for\ngetting currentTime, as well as creating new\n[AudioNodes](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode).\n\nThis is the object that facilitates and ties together all aspects of the\nWeb Audio API.",
            "itemtype": "property",
            "name": "audioContext",
            "type": "{AudioContext}",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 67,
            "description": "When a Sound instance plays, this is set to the `audioContext.currentTime`.\nIt will always reflect the start time of the most recent\n{{#crossLink \"Sound/_play:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_startedPlayingAt",
            "type": "{number}",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 78,
            "description": "When a Sound instance is played, this value is passed to the\n{{#crossLink \"AudioBufferSourceNode/start:method\"}}AudioBufferSourceNode.start(){{/crossLink}}\n`offset` param. Determines `where` (in seconds) the play will start, along\nthe duration of the audio source.",
            "itemtype": "property",
            "name": "startOffset",
            "type": "{number}",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 89,
            "description": "Whether a sound is playing or not. Becomes true when a Sound instance\nstarts playing audio. Becomes false when the Sound instance is stopped or\nends by reaching the end of it's duration.",
            "itemtype": "property",
            "name": "isPlaying",
            "type": "{boolean}",
            "default": "false",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 100,
            "description": "An array of Connection instances. Determines which AudioNode instances are\nconnected to one-another and the order in which they are connected. Starts\nas `null` but set to an array on `init` via the\n{{#crossLink \"Sound/initConnections:method\"}} initConnections{{/crossLink}}\nmethod.",
            "itemtype": "property",
            "name": "connections",
            "type": "{Ember.MutableArray}",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 112,
            "description": "Computed property. Value is an object containing the duration of the\naudioBuffer in three formats. The three formats\nare `raw`, `string`, and `pojo`.\n\nDuration of 6 minutes would be output as:\n\n    {\n      raw: 360, // seconds\n      string: '06:00',\n      pojo: {\n        minutes: 6,\n        seconds: 0\n      }\n    }",
            "itemtype": "property",
            "name": "duration",
            "type": "{object}",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 143,
            "description": "Computed property. Value is the amount of gain currently applied to the\n`gain` connection from the `connections` array, formatted as a percentage.",
            "itemtype": "property",
            "name": "percentGain",
            "type": "{number}",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 154,
            "description": "Plays the audio source immediately.",
            "itemtype": "method",
            "name": "play",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 163,
            "description": "Plays the audio source at the specified moment in time. A \"moment in time\"\nis measured in seconds from the moment that the\n{{#crossLink \"AudioContext\"}}{{/crossLink}} was instantiated.\n\nFunctionally equivalent to {{#crossLink \"Sound/_play:method\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "time",
                    "description": "The moment in time (in seconds, relative to the\n{{#crossLink \"AudioContext\"}}AudioContext's{{/crossLink}} \"beginning of\ntime\") when the audio source should be played.",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "playAt",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 180,
            "description": "Plays the audio source in specified amount of seconds from \"now\".",
            "itemtype": "method",
            "name": "playIn",
            "params": [
                {
                    "name": "seconds",
                    "description": "Number of seconds from \"now\" that the audio source\nshould be played.",
                    "type": "Number"
                }
            ],
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 192,
            "description": "Stops the audio source immediately.",
            "todo": [
                "add timed stop methods"
            ],
            "itemtype": "method",
            "name": "stop",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 207,
            "description": "returns a connection's AudioNode from the connections array by the\nconnection's `name`.",
            "itemtype": "method",
            "name": "getNodeFrom",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the AudioNode that should be returned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The requested AudioNode.",
                "type": "AudioNode"
            },
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 225,
            "description": "returns a connection from the connections array by it's name",
            "itemtype": "method",
            "name": "getConnection",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the AudioNode that should be returned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The requested Connection.",
                "type": "Connection"
            },
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 238,
            "description": "Gets the `panner` connection and changes it's pan value to the value passed in.",
            "params": [
                {
                    "name": "value",
                    "description": "The value, between -1 and 1 that the `panner` connection's\n`pan.value` should be set to.",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "changePanTo",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 256,
            "description": "Gets the `gain` connection and changes it's gain value to the value passed in.\nreturns a pojo with the `from` method that `value` is curried to, allowing\none to specify which type of value is being provided.",
            "example": [
                "\n    // these all result in gainNode.gain.value === 0.9\n    soundInstance.changeGainTo(0.9).from('ratio');\n    soundInstance.changeGainTo(0.1).from('inverseRatio')\n    soundInstance.changeGainTo(90).from('percent');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value that the `gain` connection's `gain.value` should\nbe set to. Can be a ratio, an inverseRatio or a percentage.",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "changeGainTo",
            "return": {
                "description": "Intermediary POJO containing the `from` method which will\ndetermine the type of value that `gain.value` is being set to and make the\nchange accordingly.",
                "type": "Object"
            },
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 304,
            "description": "Gets the bufferSource and stops the audio,\nchanges it's play position, and restarts the audio.\n\nreturns a pojo with the `from` method that `value` is curried to, allowing\none to specify which type of value is being provided.",
            "example": [
                "\n    // for a Sound instance with a duration of 100 seconds, these will all\n    // move the play position to 90 seconds.\n    soundInstance.seek(0.9).from('ratio');\n    soundInstance.seek(0.1).from('inverseRatio')\n    soundInstance.seek(90).from('percent');\n    soundInstance.seek(90).from('seconds');"
            ],
            "params": [
                {
                    "name": "amount",
                    "description": "The new play position value.",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "seek",
            "return": {
                "description": "Intermediary POJO containing the `from` method which will\ndetermine the type of value that play position is being set to and make the\nchange accordingly.",
                "type": "Object"
            },
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 363,
            "description": "Find's a connection in the connections array by it's `name` and removes it.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the connection that should be removed.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "removeConnection",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 374,
            "description": "Initializes default connections on Sound instantiation. Runs `on('init')`.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_initConnections",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 415,
            "description": "The underlying method that backs the\n{{#crossLink \"Sound/play:method\"}}{{/crossLink}},\n{{#crossLink \"Sound/playAt:method\"}}{{/crossLink}}, and\n{{#crossLink \"Sound/playIn:method\"}}{{/crossLink}} methods.\n\nPlays the audio source at the specified moment in time. A \"moment in time\"\nis measured in seconds from the moment that the\n{{#crossLink \"AudioContext\"}}{{/crossLink}} was instantiated.\n\nFunctionally equivalent to {{#crossLink \"Sound/playAt:method\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "time",
                    "description": "The moment in time (in seconds, relative to the\n{{#crossLink \"AudioContext\"}}AudioContext's{{/crossLink}} \"beginning of\ntime\") when the audio source should be played.",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "_play",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 450,
            "description": "Gets the array of Connection instances from the connections array and\nreturns the same array, having created any AudioNode instances that needed\nto be created, and having connected the AudioNode instances to one another\nin the order in which they were present in the connections array.",
            "itemtype": "method",
            "name": "_wireConnections",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Array of Connection instances collected from the\nconnections array, created, connected, and ready to play.",
                "type": "Array|Connection"
            },
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 471,
            "description": "Creates an AudioNode instance for a Connection instance and sets it on it's\n`node` property. Unless the Connection instance's `createdOnPlay` property\nis true, does nothing if the AudioNode instance has already been created.\n\nAlso sets any properties from a connection's `onPlaySetAttrsOnNode` array\non the node.",
            "itemtype": "method",
            "name": "_createNode",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "connection",
                    "description": "A Connection instance that should have it's\nnode created (if needed).",
                    "type": "Connection"
                }
            ],
            "return": {
                "description": "The input Connection instance after having it's node\ncreated.",
                "type": "Connection"
            },
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 506,
            "description": "Gets a Connection instance's `onPlaySetAttrsOnNode` and sets them on it's\nnode.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_setAttrsOnNode",
            "params": [
                {
                    "name": "The",
                    "description": "Connection instance that needs it's node's attrs\nset.",
                    "type": "Connection"
                }
            ],
            "return": {
                "description": "The input Connection instance after having it's nodes\nattrs set.",
                "type": "Connection"
            },
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 529,
            "description": "Meant to be passed to a Array.prototype.map function. Connects a Connection\ninstance's node to the next Connection instance's node.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_wireConnection",
            "params": [
                {
                    "name": "connection",
                    "description": "The current Connection instance in the\niteration.",
                    "type": "Connection"
                },
                {
                    "name": "idx",
                    "description": "The index of the current iteration.",
                    "type": "Number"
                },
                {
                    "name": "connections",
                    "description": "The original array of connections.",
                    "type": "Array|Connection"
                }
            ],
            "return": {
                "description": "The input Connection instance after having it's node\nconnected to the next Connection instance's node.",
                "type": "Connection"
            },
            "class": "Sound",
            "module": "Audio"
        },
        {
            "file": "addon/classes/track.js",
            "line": 26,
            "description": "Computed property. Value is an object containing the current play position\nof the audioBuffer in three formats. The three\nformats are `raw`, `string`, and `pojo`.\n\nPlay position of 6 minutes would be output as:\n\n    {\n      raw: 360, // seconds\n      string: '06:00',\n      pojo: {\n        minutes: 6,\n        seconds: 0\n      }\n    }",
            "itemtype": "property",
            "name": "position",
            "type": "{object}",
            "class": "Track",
            "module": "Audio"
        },
        {
            "file": "addon/classes/track.js",
            "line": 57,
            "description": "Computed property. Value is the current play position of the\naudioBuffer, formatted as a percentage.",
            "itemtype": "property",
            "name": "percentPlayed",
            "type": "{number}",
            "class": "Track",
            "module": "Audio"
        },
        {
            "file": "addon/classes/track.js",
            "line": 69,
            "description": "Plays the audio source immediately.",
            "itemtype": "method",
            "name": "play",
            "class": "Track",
            "module": "Audio"
        },
        {
            "file": "addon/classes/track.js",
            "line": 80,
            "description": "Pauses the audio source by stopping without\nsetting startOffset back to 0.",
            "itemtype": "method",
            "name": "pause",
            "class": "Track",
            "module": "Audio"
        },
        {
            "file": "addon/classes/track.js",
            "line": 96,
            "description": "Stops the audio source and sets\nstartOffset to 0.",
            "itemtype": "method",
            "name": "stop",
            "class": "Track",
            "module": "Audio"
        },
        {
            "file": "addon/classes/track.js",
            "line": 111,
            "description": "Sets up a `requestAnimationFrame` based loop that updates the\nstartOffset as `audioContext.currentTime` grows.\nLoop ends when `isPlaying` is false.",
            "itemtype": "method",
            "name": "_trackPlayPosition",
            "access": "private",
            "tagname": "",
            "class": "Track",
            "module": "Audio"
        },
        {
            "file": "addon/services/audio.js",
            "line": 37,
            "description": "An AudioContext instance from the Web Audio API. **NOT** available in all\nbrowsers. Not available in any version of IE (except EDGE)\nas of April 2016.",
            "itemtype": "property",
            "name": "audioContext",
            "type": "{AudioContext}",
            "todo": [
                "change this to audioContext to match other stuff",
                "or change other stuff to audioContext"
            ],
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 48,
            "description": "This acts as a register for Sound instances. Sound instances are placed in\nthe register by name, and can be called via audioService.getSound('name')",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_sounds",
            "type": "{map}",
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 58,
            "description": "This acts as a register for Sampler instances. Sampler instances are placed\nin the register by name, and can be called via audioService.getSampler('name')",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_samplers",
            "type": "{map}",
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 68,
            "description": "This acts as a register for soundfonts. A font is just a `Map` of Note\nobjects which is placed in this register by name.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_fonts",
            "type": "{map}",
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 78,
            "description": "This acts as a register for Track instances. Track instances are placed in\nthis register by name, and can be called via audioService.getTrack('name')",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_tracks",
            "type": "{map}",
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 88,
            "description": "This acts as a register for BeatTrack instances. BeatTrack instances are\nplaced in the register by name, and can be called via\naudioService.getBeatTrack('name')",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_beatTracks",
            "type": "{map}",
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 99,
            "description": "Acts as a proxy method, returns a POJO with methods that return the _load\nand _loadFont methods so that in the end. See example.",
            "example": [
                "\n    audio.load('some-url.wav').asSound('some-sound');\n    audio.load('some-url.mp3').asTrack('some-track');\n    audio.load(['some-url.mp3']).asSampler('some-sampler');\n    audio.load(['some-url.mp3']).asBeatTrack('some-beat-track');\n    audio.load('some-url.js').asFont('some-font');"
            ],
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "src",
                    "description": "The URL location of an audio file. Will be used by\n\"fetch\" to get the audio file. Can be a local or a relative URL. An array\nof URLs is required if a beatTrack is being loaded via `.asBeatTrack` or\n`.asSampler`.",
                    "type": "String|array"
                }
            ],
            "return": {
                "description": "returns a POJO that contains a few methods that curry\n\"src\" \"type\" and \"name\" over to\n{{#crossLink \"Audio/_load:method\"}}{{/crossLink}} and\n{{#crossLink \"Audio/_loadFont:method\"}}{{/crossLink}} and allow you to\nspecify what type of Sound you'd like created.",
                "type": "Object"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 211,
            "description": "Gets a BeatTrack instance by name from the _beatTracks register.",
            "itemtype": "method",
            "name": "getBeatTrack",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the BeatTrack instance that should be\nretrieved from the _beatTracks register.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the BeatTrack instance that matches the\nprovided name.",
                "type": "BeatTrack"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 225,
            "description": "Gets a Sound instance by name from the _sounds register",
            "itemtype": "method",
            "name": "getSound",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the sound that should be retrieved\nfrom the _sounds register.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns the Sound instance that matches the provided name.",
                "type": "Sound"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 239,
            "description": "Gets a Track instance by name from the _tracks register",
            "itemtype": "method",
            "name": "getTrack",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the Track instance that should be\nretrieved from the _tracks register.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the Track instance that matches the provided name.",
                "type": "Track"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 253,
            "description": "Gets a soundfont Map by name from the _fonts register and allows it to be\nplayed via the returned POJO containing a method called `play`.",
            "example": [
                "\n    audio.getFont('some-font').play('Ab1');"
            ],
            "itemtype": "method",
            "name": "getFont",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the Map that should be retrieved\nfrom the _fonts register.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a POJO that has a `play` method which allows a\nnote from the requested font to be played.",
                "type": "Object"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 282,
            "description": "Gets a Sampler instance by name from the _samplers register",
            "itemtype": "method",
            "name": "getSampler",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the sampler that should be retrieved\nfrom the _samplers register.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns the Sampler instance that matches the provided name.",
                "type": "Sampler"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 296,
            "description": "Gets all instances of requested type and calls\n{{#crossLink \"Sound/stop:method\"}}{{/crossLink}} on each.",
            "itemtype": "method",
            "name": "stopAll",
            "params": [
                {
                    "name": "type='tracks'",
                    "description": "The type of the register that you wish\nto stop all instances of. Can be `'tracks'`, or `'sounds'`.",
                    "type": "String"
                }
            ],
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 311,
            "description": "Gets all Track instances and calls\n{{#crossLink \"Sound/pause:method\"}}{{/crossLink}} on each. Only works for\ntracks because only Track instances are pause-able.",
            "itemtype": "method",
            "name": "pauseAll",
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 324,
            "description": "Gets a register by it's type.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getRegisterFor",
            "params": [
                {
                    "name": "type",
                    "description": "Which register to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Map"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 345,
            "description": "Creates an {{#crossLinkModule \"Audio\"}}Audio Class{{/crossLinkModule}}\ninstance (which is based on which \"type\" is specified), and passes \"props\"\nto the new instance.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createSoundFor",
            "params": [
                {
                    "name": "type",
                    "description": "The type of\n{{#crossLinkModule \"Audio\"}}Audio Class{{/crossLinkModule}} to be created.",
                    "type": "String"
                },
                {
                    "name": "props",
                    "description": "POJO to pass to the new instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Sound|Track|BeatTrack"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 373,
            "description": "Loads and decodes an audio file, creating a Sound, Track, or BeatTrack\ninstance (as determined by the \"type\" parameter) and places the instance\ninto it's corresponding register.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_load",
            "params": [
                {
                    "name": "name",
                    "description": "The name that the created instance should be\nregistered as.",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "The URI location of an audio file. Will be used by\n\"fetch\" to get the audio file. Can be a local or a relative URL",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Determines the type of object that should be created,\nas well as which register the instance should be placed in. Can be 'sound',\n'track', or 'beatTrack'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a promise which resolves\nto an instance of a Sound, Track, or BeatTrack",
                "type": "Promise|Sound|Track|BeatTrack"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 416,
            "description": "Creates a BeatTrack instance from an array of URLs.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_loadBeatTrack",
            "params": [
                {
                    "name": "name",
                    "description": "The name that this BeatTrack instance will be\nregistered as on the _beatTracks register.",
                    "type": "String"
                },
                {
                    "name": "srcArray",
                    "description": "An array of strings that specify URLs to load as\nSounds.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise that resolves to a BeatTrack instance.",
                "type": "Promise|BeatTrack"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 439,
            "description": "1. Creates a Map instance (a \"font\") and places it in the fonts register.\n2. Loads a soundfont file and decodes all the notes.\n3. Creates a Note object instance for each note.\n4. Places each note on the font by name.\n5. Returns a promise that resolves to an array of properly sorted Note\nobject instances.\n\nThe notes are sorted the way that they would appear on a piano. In the\nexample, you can see how the note `Ab1` from the `font-name` soundfont\nwould be played:",
            "example": [
                "\n    audio.getFont('font-name').play('Ab1');"
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_loadFont",
            "params": [
                {
                    "name": "instrumentName",
                    "description": "The name that you will refer to this sound\nfont by.",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "The URI location of a soundfont file. Will be used by\n\"fetch\" to get the soundfont file. Can be a local or a relative URL.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a promise that resolves when the sound font\nhas been successfully decoded. The promise resolves to an array of sorted note names.",
                "type": "Promise|array"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 499,
            "description": "Accepts an array of URLs to audio files and creates a Sound instance for\neach.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createSoundsArray",
            "params": [
                {
                    "name": "name",
                    "description": "The base-name of the sound. If one were loading up\nmultiple kick drum samples, this might be 'kick'.",
                    "type": "String"
                },
                {
                    "name": "srcArray",
                    "description": "An array of strings. Each item being a URL to an\naudio file that should be loaded and turned into a Sound instance.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise that resolves to an array of Sound objects.",
                "type": "Promise|array"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 522,
            "description": "Takes an array of base64 encoded strings (notes) and returns an array of\narrays like [[name, audio], [name, audio]]",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_extractDecodedKeyValuePairs",
            "params": [
                {
                    "name": "notes",
                    "description": "Array of base64 encoded strings.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns an Array of arrays. Each inner array has two\nvalues, `[noteName, decodedAudio]`.",
                "type": "Array"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/services/audio.js",
            "line": 558,
            "description": "Takes an array of arrays, each inner array acting as\na key-value pair in the form `[noteName, audioData]`. Each inner array is\ntransformed into a {{#crossLink \"Note\"}}{{/crossLink}} and the outer array\nis returned. This method also sets each note on it's corresponding\ninstrument {{#crossLink \"Map\"}}{{/crossLink}} instance by name. Each note\nis playable as seen in the example.",
            "example": [
                "\n    audioService.get('fonts').get('instrument-name').play('Ab5');"
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createNoteObjects",
            "params": [
                {
                    "name": "audioData",
                    "description": "Array of arrays, each inner array like\n`[noteName, audioData]`.",
                    "type": "Array"
                },
                {
                    "name": "instrumentName",
                    "description": "Name of the instrument each note belongs to.\nThis is the name that will be used to identify the instrument on the fonts\nregister.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns an Array of {{#crossLink \"Note\"}}Notes{{/crossLink}}",
                "type": "Array"
            },
            "class": "AudioService",
            "module": "AudioService"
        },
        {
            "file": "addon/utils/array-methods.js",
            "line": 11,
            "description": "Given an array and an index, splits the array at index and pushes the first\nchunk to the end of the second chunk.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "arraySwap",
            "params": [
                {
                    "name": "arr",
                    "description": "An array to split, shift and rejoin.",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "The index where the split should occur.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The swapped/shifted array.",
                "type": "Array"
            },
            "class": "utils",
            "module": "AudioService"
        },
        {
            "file": "addon/utils/array-methods.js",
            "line": 27,
            "description": "Flattens an array of arrays into a shallow array.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "flatten",
            "params": [
                {
                    "name": "arr",
                    "description": "An array to flatten.",
                    "type": "ArrayOfArrays"
                }
            ],
            "return": {
                "description": "The flattened array.",
                "type": "Array"
            },
            "class": "utils",
            "module": "AudioService"
        },
        {
            "file": "addon/utils/decode-base64.js",
            "line": 5,
            "description": "Converts a base64 string into a Uint8Array of \"binary\" data.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "base64ToUint8",
            "params": [
                {
                    "name": "base64String",
                    "description": "The base64 string that you'd like to be converted.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A Uint8Array of converted \"binary\" audio data.",
                "type": "Uint8Array"
            },
            "class": "utils",
            "module": "AudioService"
        },
        {
            "file": "addon/utils/decode-base64.js",
            "line": 37,
            "description": "Strips extraneous stuff from a soundfont and splits the soundfont into a JSON\nobject. Keys are note names and values are base64 encoded strings.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "mungeSoundFont",
            "params": [
                {
                    "name": "soundfont",
                    "description": "A soundfont as a long base64 string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A JSON representation of all the notes in the font",
                "type": "Object"
            },
            "class": "utils",
            "module": "AudioService"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 12,
            "description": "Sorts an array of {{#crossLink \"Note\"}}Notes{{/crossLink}} so that they are in the same order that they would\nappear on a piano.",
            "params": [
                {
                    "name": "notes",
                    "description": "An array of notes that should be musically-sorted.",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "sortNotes",
            "return": {
                "description": "Array of musically-sorted notes.",
                "type": "Array"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 43,
            "description": "Takes an array of arrays of notes, determines the last note of\nthe first array, then splits the rest of the arrays in the array at the last\nnote of the first array, and moves the beginning of the array to the end\nso that each array starts at the next note after the last note of the first\narray, instead of at \"A\" (alphabetically).",
            "example": [
                "\n    This is hard to explain. Here's an example.\n    (Simplified, as the real notes are objects)\n\n    Example input: [['A0', 'B0'], ['A1', 'B1', 'C1', 'D1']]\n    Example output: [['A0', 'B0'], ['C1', 'D1', 'A1', 'B1']]"
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "octaveShift",
            "params": [
                {
                    "name": "octaves",
                    "description": "An array of octaves, each octave is an array of Notes.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Input array after having been shifted.",
                "type": "Array"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 80,
            "description": "Maps through an array of arrays and sorts each array with\n\"noteSort\"",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "octaveSort",
            "params": [
                {
                    "name": "octaves",
                    "description": "array of arrays to be sorted",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of sorted arrays",
                "type": "Array"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 95,
            "description": "Accepts an array of Note objects and passes back an array\nlike this: [original array, array of each octave in the orginal array]",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "extractOctaves",
            "params": [
                {
                    "name": "notes",
                    "description": "array of note objects.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array containing two inner arrays, [0] is the untouched input\narray, [1] is an array of all the octaves in the original array.",
                "type": "Array"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 111,
            "description": "Accepts an array of two arrays and returns the same\narray, but with array at index [1] uniq'd and sorted alphabetically.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "stripDuplicateOctaves",
            "params": [
                {
                    "name": "notes, octaves",
                    "description": "the output from extractOctaves.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The mutated array.",
                "type": "Array"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 126,
            "description": "Accepts an array of two arrays, [0] being an array\nof Note objects, [1] being all the available octaves. Returns a single array\nmade up of arrays of Note objects, organized by octave. Each inner array\nrepresents all of the notes in an octave.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "createOctavesWithNotes",
            "params": [
                {
                    "name": "data",
                    "description": "The output of stripDuplicateOctaves.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.MutableArray"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 143,
            "description": "Acts as a comparator function for the\n{{#crossLink \"Array/sort:method\"}}Array.prototype.sort{{/crossLink}} method.\nSorts two {{#crossLink \"Note\"}}{{/crossLink}} instances alphabetically, flats\nbefore naturals.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "noteSort",
            "params": [
                {
                    "name": "a",
                    "description": "The first Note instance to compare.",
                    "type": "Note"
                },
                {
                    "name": "b",
                    "description": "The second Note instance to compare.",
                    "type": "Note"
                }
            ],
            "return": {
                "description": "-1 or 1, depending on whether the current\n{{#crossLink \"Note\"}}{{/crossLink}} instance should be sorted left, or right.",
                "type": "Number"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/zeroify.js",
            "line": 5,
            "description": "Formats a number and converts to string: 6 becomes '06'",
            "itemtype": "method",
            "name": "zeroify",
            "params": [
                {
                    "name": "input",
                    "description": "A number that should be formatted",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The number formatted and converted to string",
                "type": "String"
            },
            "class": "utils",
            "module": "utils"
        }
    ],
    "warnings": []
}