{
    "project": {
        "name": "ember-audio",
        "description": "An Ember addon that makes working with the Web Audio API super EZ",
        "version": "0.0.0.1d61e3e0"
    },
    "files": {
        "addon/classes/beat-track.js": {
            "name": "addon/classes/beat-track.js",
            "modules": {
                "BeatTrack": 1
            },
            "classes": {
                "BeatTrack": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/beat.js": {
            "name": "addon/classes/beat.js",
            "modules": {
                "Beat": 1
            },
            "classes": {
                "Beat": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/index.js": {
            "name": "addon/classes/index.js",
            "modules": {
                "Audio": 1,
                "Musical-Concepts": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/note.js": {
            "name": "addon/classes/note.js",
            "modules": {
                "Note": 1
            },
            "classes": {
                "Note": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/sound.js": {
            "name": "addon/classes/sound.js",
            "modules": {
                "Sound": 1
            },
            "classes": {
                "Sound": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/classes/track.js": {
            "name": "addon/classes/track.js",
            "modules": {
                "Track": 1
            },
            "classes": {
                "Track": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/services/audio.js": {
            "name": "addon/services/audio.js",
            "modules": {
                "Audio-Service": 1
            },
            "classes": {
                "Audio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/array-methods.js": {
            "name": "addon/utils/array-methods.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/decode-base64.js": {
            "name": "addon/utils/decode-base64.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/index.js": {
            "name": "addon/utils/index.js",
            "modules": {
                "utils": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/note-methods.js": {
            "name": "addon/utils/note-methods.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/zeroify.js": {
            "name": "addon/utils/zeroify.js",
            "modules": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Audio": {
            "name": "Audio",
            "submodules": {
                "BeatTrack": 1,
                "Sound": 1,
                "Track": 1
            },
            "elements": {},
            "classes": {
                "BeatTrack": 1,
                "Sound": 1,
                "Track": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/classes/track.js",
            "line": 17,
            "description": "Provides classes that are capable of interacting with the Web Audio API's\nAudioContext."
        },
        "BeatTrack": {
            "name": "BeatTrack",
            "submodules": {},
            "elements": {},
            "classes": {
                "BeatTrack": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Audio",
            "namespace": "",
            "file": "addon/classes/beat-track.js",
            "line": 17,
            "description": "An instance of the BeatTrack class behaves very similarly to a \"lane\" on a\ndrum machine or a step sequencer."
        },
        "Musical-Concepts": {
            "name": "Musical-Concepts",
            "submodules": {
                "Beat": 1,
                "Note": 1
            },
            "elements": {},
            "classes": {
                "Beat": 1,
                "Note": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/classes/note.js",
            "line": 16,
            "description": "Provides helper classes that represent musical concepts meant to be used by\nclasses from the Sound module."
        },
        "Beat": {
            "name": "Beat",
            "submodules": {},
            "elements": {},
            "classes": {
                "Beat": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Musical-Concepts",
            "namespace": "",
            "file": "addon/classes/beat.js",
            "line": 16,
            "description": "An instance of the Beat class represents a single \"beat\" on a rhythmic\ninstrument."
        },
        "Note": {
            "name": "Note",
            "submodules": {},
            "elements": {},
            "classes": {
                "Note": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Musical-Concepts",
            "namespace": "",
            "file": "addon/classes/note.js",
            "line": 16,
            "description": "The Note class provides identification-focused functionality for collections\nof musical notes."
        },
        "Sound": {
            "name": "Sound",
            "submodules": {},
            "elements": {},
            "classes": {
                "Sound": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Audio",
            "namespace": "",
            "file": "addon/classes/sound.js",
            "line": 21,
            "description": "The Sound class provides the core functionality for interacting with the Web\nAudio API's AudioContext, and is the base class for all of the other classes\nin the Audio module."
        },
        "Track": {
            "name": "Track",
            "submodules": {},
            "elements": {},
            "classes": {
                "Track": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Audio",
            "namespace": "",
            "file": "addon/classes/track.js",
            "line": 17,
            "description": "An instance of the Track class represents a \"track\" of music, similar in\nconcept to a track on a CD or an MP3 player."
        },
        "Audio-Service": {
            "name": "Audio-Service",
            "submodules": {},
            "elements": {},
            "classes": {
                "Audio": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/services/audio.js",
            "line": 16,
            "description": "Provides the Audio Service"
        },
        "utils": {
            "name": "utils",
            "submodules": {},
            "elements": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/utils/zeroify.js",
            "line": 1
        }
    },
    "classes": {
        "BeatTrack": {
            "name": "BeatTrack",
            "shortname": "BeatTrack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "submodule": "BeatTrack",
            "namespace": "",
            "file": "addon/classes/beat-track.js",
            "line": 17,
            "description": "An instance of this class has a single\n{{#crossLink \"AudioBuffer\"}}{{/crossLink}} (a single \"sound\") but provides\nmethods to play that sound repeatedly and in a rhythmic way. An instance of\nthis class behaves very similarly to a \"lane\" on a drum machine.",
            "extends": "Sound"
        },
        "Beat": {
            "name": "Beat",
            "shortname": "Beat",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Musical-Concepts",
            "submodule": "Beat",
            "namespace": "",
            "file": "addon/classes/beat.js",
            "line": 16,
            "description": "This class represents a single \"beat\" for a rhythmic instrument. An instance of this\nclass can be set to `active` or not to facilitate the way that most drum\nmachines work (when a beat is not `active`, the time that it occupies still\nexists, but it does not cause audio to play, effectively resulting in a\n\"rest\"). It provides properties that track when it is played, and when a \"rest\"\nis played in it's place.\n\nThis class does not have the ability to create audio on it's own and is\\\nexpected be a \"child\" of one of the Sound classes. See it's implementation in\n{{#crossLink \"BeatTrack\"}}BeatTrack{{/crossLink}} for an example.\n\n    // Cannot play audio on it's own.\n    // Must pass in parentPlay and/or parentPlayIn from a parent class.\n    Beat.create({\n      parentPlayIn: this.playIn.bind(this),\n      parentPlay: this.play.bind(this),\n    });"
        },
        "Note": {
            "name": "Note",
            "shortname": "Note",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Musical-Concepts",
            "submodule": "Note",
            "namespace": "",
            "file": "addon/classes/note.js",
            "line": 16,
            "description": "A class that represents a musical note. When a soundfont is created via the\n{{#crossLink \"Audio\"}}Audio Service{{/crossLink}}, an instance of this class\nis created for every musical note that is represented in a soundfont. This\nclass can be used for any collection of Sound instances where each instance\nneeds an awareness of what \"musical note\" it is (i.e. octave, accidental, etc..).\n\nThis class only makes sense when used in the context of a collection, as the\nonly functionality it provides over a\n{{#crossLink \"Sound\"}}Sound{{/crossLink}}, serves to facilitate identification.",
            "extends": "Sound"
        },
        "Sound": {
            "name": "Sound",
            "shortname": "Sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "submodule": "Sound",
            "namespace": "",
            "file": "addon/classes/sound.js",
            "line": 21,
            "description": "The Sound class provides the core functionality for\ninteracting with the Web Audio API's AudioContext, and is the base class for\nall other {{#crossLinkModule \"Audio\"}}{{/crossLinkModule}} types. It prepares\nan audio source, provides various methods for interacting with the audio source,\ncreates {{#crossLink \"AudioNode\"}}AudioNodes{{/crossLink}} from the\nconnections array, sets up the necessary connections/routing between them,\nand provides some methods to {{#crossLink \"Sound/play:method\"}}{{/crossLink}}\nand {{#crossLink \"Sound/stop:method\"}}{{/crossLink}} the audio source."
        },
        "Track": {
            "name": "Track",
            "shortname": "Track",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "submodule": "Track",
            "namespace": "",
            "file": "addon/classes/track.js",
            "line": 17,
            "description": "A class that represents a \"track\" of music, similar in concept to a track on\na CD or an MP3 player. Provides methods for tracking the play position of the\nunderlying {{#crossLink \"AudioBuffer\"}}{{/crossLink}}, and pausing/resuming.",
            "extends": "Sound"
        },
        "Audio": {
            "name": "Audio",
            "shortname": "Audio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio-Service",
            "namespace": "",
            "file": "addon/services/audio.js",
            "line": 16,
            "description": "A {{#crossLink \"Ember.Service\"}}Service{{/crossLink}} that provides methods\nfor interacting with the various\n{{#crossLinkModule \"Audio\"}}{{/crossLinkModule}} classes and the Web Audio\nAPI's {{#crossLink \"AudioContext\"}}{{/crossLink}}.\n\n    // inject into an object\n    Ember.Something.extend({\n      audio: Ember.inject.service()\n    });\n\n    // use\n    loadSound() {\n      return this.get('audio').load('some.mp3').asSound('some-sound');\n    }"
        },
        "utils": {
            "name": "utils",
            "shortname": "utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "utils",
            "namespace": "",
            "file": "addon/utils/zeroify.js",
            "line": 1,
            "access": "private",
            "tagname": ""
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "addon/classes/beat.js",
            "line": 39,
            "description": "If `active` is `true`, all methods of play will cause this instance to play.\nIf `active` is `false`, the `playIfActive()` and `ifActivePlayIn()`\nmethods will treat this instance as a rest (a timed period of silence).",
            "itemtype": "property",
            "name": "active",
            "type": "{boolean}",
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 49,
            "description": "Whether a Beat instance is currently playing, considering both active and\ninactive beats (rests). When switched to `true`, is automatically returned\nto false after the time specified by the duration property.",
            "itemtype": "property",
            "name": "currentTimeIsPlaying",
            "type": "{boolean}",
            "default": "false",
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 60,
            "description": "Whether a Beat instance is currently playing, considering only active beats.\nWhen switched to `true`, is automatically returned to false after the time\nspecified by the duration property.",
            "itemtype": "property",
            "name": "isPlaying",
            "type": "{boolean}",
            "default": "false",
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 71,
            "description": "On Beat instance instantiation, this property should be set to the parent's\naudioBuffer.duration.",
            "itemtype": "property",
            "name": "audioBufferDuration",
            "type": "{number|null}",
            "access": "private",
            "tagname": "",
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 81,
            "description": "If true, audioBuffer.duration is used instead of durationValue to determine\nlength of time that isPlaying and currentTimeIsPlaying stay true after beat\nis played.",
            "itemtype": "property",
            "name": "durationFromAudioBuffer",
            "type": "{boolean}",
            "default": "false",
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 92,
            "description": "Determines length of time, in milliseconds, before isPlaying and\ncurrentTimeIsPlaying are automatically switched back to false after having\nbeen switched to true.\n\nIf durationFromAudioBuffer is true, this property is not utilized.",
            "itemtype": "property",
            "name": "durationValue",
            "type": "{number}",
            "default": "100",
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 105,
            "description": "Computed property. Susses out which duration should be used to determine\nhow long isPlaying and currentTimeIsPlaying stay `true` after play.\n\nBy default, this value is set to durationValue, if durationFromAudioBuffer\nis true, then this value is the duration of the parent AudioBuffer.",
            "itemtype": "property",
            "name": "duration",
            "type": "{number}",
            "access": "private",
            "tagname": "",
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 130,
            "description": "Calls it's parent's `playIn()` method directly to play the beat in\n`${offset}` seconds.\n\nisPlaying and currentTimeIsPlaying are both marked true after the provided\noffset has elapsed.",
            "itemtype": "method",
            "name": "playIn",
            "params": [
                {
                    "name": "offset",
                    "description": "Number of seconds from \"now\" that the audio should\nplay.",
                    "type": "Number"
                }
            ],
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 151,
            "description": "If the beat is marked `active`, calls it's parent's `playIn()` method\ndirectly to play the beat in `${offset}` seconds.\n\nIf active, isPlaying is marked true after the provided offset has elapsed.\n\ncurrentTimeIsPlaying is marked true after the provided offset has elapsed,\neven if beat is not active.",
            "itemtype": "method",
            "name": "ifActivePlayIn",
            "params": [
                {
                    "name": "offset",
                    "description": "Number of seconds from \"now\" that the audio should\nplay.",
                    "type": "Number"
                }
            ],
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 176,
            "description": "Calls it's parent's `play()` method directly to play the beat immediately.\n\nisPlaying and currentTimeIsPlaying are both immediately marked true.",
            "itemtype": "method",
            "name": "play",
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 189,
            "description": "If `active`, calls it's parent's `play()` method directly to play the beat\nimmediately.\n\nIf `active`, isPlaying is immediately marked true.\n\ncurrentTimeIsPlaying is immediately marked true, even if beat is not active.",
            "itemtype": "method",
            "name": "playIfActive",
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 208,
            "description": "Sets `isPlaying` to `true` and sets up a timer that sets `isPlaying` back\nto false after `duration` has elapsed.",
            "itemtype": "method",
            "name": "_markPlaying",
            "access": "private",
            "tagname": "",
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/beat.js",
            "line": 220,
            "description": "Sets `currentTimeIsPlaying` to `true` and sets up a timer that sets\n`currentTimeIsPlaying` back to false after `duration` has elapsed.",
            "itemtype": "method",
            "name": "_markCurrentTimePlaying",
            "access": "private",
            "tagname": "",
            "class": "Beat",
            "module": "Musical-Concepts",
            "submodule": "Beat"
        },
        {
            "file": "addon/classes/note.js",
            "line": 32,
            "description": "For note `Ab5`, this would be `A`. Value should be set on instantiation.",
            "itemtype": "property",
            "name": "letter",
            "type": "{string}",
            "class": "Note",
            "module": "Musical-Concepts",
            "submodule": "Note"
        },
        {
            "file": "addon/classes/note.js",
            "line": 40,
            "description": "For note `Ab5`, this would be `b`. Value should be set on instantiation.",
            "itemtype": "property",
            "name": "accidental",
            "type": "{string}",
            "class": "Note",
            "module": "Musical-Concepts",
            "submodule": "Note"
        },
        {
            "file": "addon/classes/note.js",
            "line": 48,
            "description": "For note `Ab5`, this would be `5`. Value should be set on instantiation.",
            "itemtype": "property",
            "name": "octave",
            "type": "{string}",
            "class": "Note",
            "module": "Musical-Concepts",
            "submodule": "Note"
        },
        {
            "file": "addon/classes/note.js",
            "line": 56,
            "description": "Computed property. Value is `${letter}${octave}` or\n`${letter}${accidental}${octave}` if accidental exists.",
            "itemtype": "property",
            "name": "identifier",
            "type": "{string}",
            "class": "Note",
            "module": "Musical-Concepts",
            "submodule": "Note"
        },
        {
            "file": "addon/classes/note.js",
            "line": 80,
            "description": "Computed property. Value is `${letter}` or `${letter}${accidental}` if\naccidental exists.",
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "class": "Note",
            "module": "Musical-Concepts",
            "submodule": "Note"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 35,
            "description": "When using the {{#crossLink \"Audio-Service\"}}{{/crossLink}}, The name that\nthis Sound instance is registered as on it's parent register.",
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 44,
            "description": "The Sound instance's [audio source node](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode).",
            "itemtype": "property",
            "name": "bufferSourceNode",
            "type": "{AudioBufferSourceNode}",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 53,
            "description": "The AudioBuffer instance that provides audio data to the\n{{#crossLink \"Sound/bufferSourceNode:property\"}}bufferSourceNode{{/crossLink}}.",
            "itemtype": "property",
            "name": "audioBuffer",
            "type": "{AudioBuffer}",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 63,
            "description": "The parent\n[AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)\ninstance that all audio events are occurring within. It is useful for\ngetting currentTime, as well as creating new\n[AudioNodes](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode).\n\nThis is the object that facilitates and ties together all aspects of the\nWeb Audio API.",
            "itemtype": "property",
            "name": "audioContext",
            "type": "{AudioContext}",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 78,
            "description": "When a Sound instance plays, this is set to the `audioContext.currentTime`.\nIt will always reflect the start time of the most recent\n{{#crossLink \"Sound/_play:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "startedPlayingAt",
            "type": "{number}",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 89,
            "description": "When a Sound instance is played, this value is passed to the\n{{#crossLink \"AudioBufferSourceNode/start:method\"}}AudioBufferSourceNode.start(){{/crossLink}}\n`offset` param. Determines `where` (in seconds) the play will start, along\nthe duration of the audio source.",
            "itemtype": "property",
            "name": "startOffset",
            "type": "{number}",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 100,
            "description": "Whether a sound is playing or not. Becomes true when a Sound instance\nstarts playing audio. Becomes false when the Sound instance is stopped or\nends by reaching the end of it's duration.",
            "itemtype": "property",
            "name": "isPlaying",
            "type": "{boolean}",
            "default": "false",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 111,
            "description": "Determines what AudioNodes are connected to one-another and the order in\nwhich they are connected. Starts as `null` but set to an array on `init`\nvia the {{#crossLink \"Sound/initConnections:method\"}}\ninitConnections{{/crossLink}} method.",
            "itemtype": "property",
            "name": "connections",
            "type": "{Ember.MutableArray}",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 122,
            "description": "Computed property. Value is an object containing the duration of the\naudioBuffer in three formats. The three formats\nare `raw`, `string`, and `pojo`.\n\nDuration of 6 minutes would be output as:\n\n    {\n      raw: 360, // seconds\n      string: '06:00',\n      pojo: {\n        minutes: 6,\n        seconds: 0\n      }\n    }",
            "itemtype": "property",
            "name": "duration",
            "type": "{object}",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 153,
            "description": "Computed property. Value is the amount of gain currently applied to the\n`gainNode` of the `connections` array, formatted as a percentage.",
            "itemtype": "property",
            "name": "percentGain",
            "type": "{number}",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 164,
            "description": "Computed property. Recreates all the connection's AudioNodes whenever the\nconnections array changes. Any values that have been set on a node before\nthe connections array changes will need to be re-set after the connections\narray changes.\n\nDoesn't create an AudioNode for any connection that has `createdOnPlay === true`",
            "todo": [
                "Get rid of need to re-set AudioNode param values after changing.\nProbably just get rid of this.\n[This](https://github.com/sethbrasile/ember-audio/blob/master/tests/dummy/app/controllers/audio-routing.js#L50)\nshould be OK at the top of the method",
                "but right now it's not."
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "createdConnections",
            "type": "{number}",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 200,
            "description": "Initializes default connections on Sound instantiation. Runs `on('init')`.",
            "itemtype": "method",
            "name": "initConnections",
            "todo": [
                "Create an actual Connection class to clarify the API for creating\ncustom AudioNodes"
            ],
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 243,
            "description": "Plays the audio source immediately.",
            "itemtype": "method",
            "name": "play",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 252,
            "description": "Plays the audio source at the specified moment in time. A \"moment in time\"\nis measured in seconds from the moment that the\n{{#crossLink \"AudioContext\"}}{{/crossLink}} was instantiated.\n\nFunctionally equivalent to {{#crossLink \"Sound/_play:method\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "time",
                    "description": "The moment in time (in seconds, relative to the\n{{#crossLink \"AudioContext\"}}AudioContext's{{/crossLink}} \"beginning of\ntime\") when the audio source should be played.",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "playAt",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 269,
            "description": "Plays the audio source in `${amount}` seconds.",
            "itemtype": "method",
            "name": "playIn",
            "params": [
                {
                    "name": "amount",
                    "description": "Number of seconds from \"now\" that the audio source\nshould be played.",
                    "type": "Number"
                }
            ],
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 281,
            "description": "Stops the audio source immediately.",
            "todo": [
                "add timed stop methods"
            ],
            "itemtype": "method",
            "name": "stop",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 296,
            "description": "returns a connection's AudioNode from the createdConnections array by it's\n`name`.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the AudioNode that should be returned.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "getNode",
            "return": {
                "description": "The requested AudioNode.",
                "type": "AudioNode"
            },
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 313,
            "description": "Gets the `pannerNode` and changes it's pan value to the value passed in.",
            "params": [
                {
                    "name": "value",
                    "description": "The value, between -1 and 1 that the `pannerNode`'s\n`pan.value` should be set to.",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "pan",
            "todo": [
                "Make \"API\" match \"changeGainTo\""
            ],
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 326,
            "description": "Gets the `gainNode` and changes it's gain value to the value passed in.\nreturns a pojo with the `from` method that `value` is curried to, allowing\none to specify which type of value is being provided.",
            "example": [
                "\n    // these all result in gainNode.gain.value === 0.9\n    soundInstance.changeGainTo(0.9).from('ratio');\n    soundInstance.changeGainTo(0.1).from('inverseRatio')\n    soundInstance.changeGainTo(90).from('percent');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value that the `gainNode`'s `gain.value` should\nbe set to. Can be a ratio, an inverseRatio or a percentage.",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "changeGainTo",
            "return": {
                "description": "Intermediary POJO containing the `from` method which will\ndetermine the type of value that `gain.value` is being set to and make the\nchange accordingly.",
                "type": "Object"
            },
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 374,
            "description": "Gets the bufferSourceNode and stops the audio,\nchanges it's play position, and restarts the audio.\n\nreturns a pojo with the `from` method that `value` is curried to, allowing\none to specify which type of value is being provided.",
            "example": [
                "\n    // for a Sound instance with a duration of 100 seconds, these will all\n    // move the play position to 90 seconds.\n    soundInstance.seek(0.9).from('ratio');\n    soundInstance.seek(0.1).from('inverseRatio')\n    soundInstance.seek(90).from('percent');\n    soundInstance.seek(90).from('seconds');"
            ],
            "params": [
                {
                    "name": "amount",
                    "description": "The new play position value.",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "seek",
            "return": {
                "description": "Intermediary POJO containing the `from` method which will\ndetermine the type of value that play position is being set to and make the\nchange accordingly.",
                "type": "Object"
            },
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 433,
            "description": "Find's a connection in the connections array by it's `name` and removes it.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the connection that should be removed.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "removeConnection",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 446,
            "description": "The underlying method that backs the\n{{#crossLink \"Sound/play:method\"}}{{/crossLink}},\n{{#crossLink \"Sound/playAt:method\"}}{{/crossLink}}, and\n{{#crossLink \"Sound/playIn:method\"}}{{/crossLink}} methods.\n\nPlays the audio source at the specified moment in time. A \"moment in time\"\nis measured in seconds from the moment that the\n{{#crossLink \"AudioContext\"}}{{/crossLink}} was instantiated.\n\nFunctionally equivalent to {{#crossLink \"Sound/playAt:method\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "time",
                    "description": "The moment in time (in seconds, relative to the\n{{#crossLink \"AudioContext\"}}AudioContext's{{/crossLink}} \"beginning of\ntime\") when the audio source should be played.",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "_play",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 481,
            "description": "Gets the array of connections from the\ncreatedConnections computed property and\nreturns the same array with any AudioNodes that need to be created at\n{{#crossLink \"Sound/_play:method\"}}{{/crossLink}} time having been created.",
            "itemtype": "method",
            "name": "_wireUpConnections",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/sound.js",
            "line": 512,
            "description": "Performs the actual AudioNode creation for the\n{{#crossLink 'Sound/_wireUpConnections:method'}}{{/crossLink}} method.\n\nAlso sets any properties from a connection's `onPlaySetAttrsOnNode` array\non the node.",
            "itemtype": "method",
            "name": "_createNode",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "Audio",
            "submodule": "Sound"
        },
        {
            "file": "addon/classes/track.js",
            "line": 27,
            "description": "Computed property. Value is an object containing the current play position\nof the audioBuffer in three formats. The three\nformats are `raw`, `string`, and `pojo`.\n\nPlay position of 6 minutes would be output as:\n\n    {\n      raw: 360, // seconds\n      string: '06:00',\n      pojo: {\n        minutes: 6,\n        seconds: 0\n      }\n    }",
            "itemtype": "property",
            "name": "position",
            "type": "{object}",
            "class": "Track",
            "module": "Audio",
            "submodule": "Track"
        },
        {
            "file": "addon/classes/track.js",
            "line": 58,
            "description": "Computed property. Value is the current play position of the\naudioBuffer, formatted as a percentage.",
            "itemtype": "property",
            "name": "percentPlayed",
            "type": "{number}",
            "class": "Track",
            "module": "Audio",
            "submodule": "Track"
        },
        {
            "file": "addon/classes/track.js",
            "line": 70,
            "description": "Plays the audio source immediately.",
            "itemtype": "method",
            "name": "play",
            "class": "Track",
            "module": "Audio",
            "submodule": "Track"
        },
        {
            "file": "addon/classes/track.js",
            "line": 81,
            "description": "Pauses the audio source by stopping without\nsetting startOffset back to 0.",
            "itemtype": "method",
            "name": "pause",
            "class": "Track",
            "module": "Audio",
            "submodule": "Track"
        },
        {
            "file": "addon/classes/track.js",
            "line": 95,
            "description": "Stops the audio source and sets\nstartOffset to 0.",
            "itemtype": "method",
            "name": "stop",
            "class": "Track",
            "module": "Audio",
            "submodule": "Track"
        },
        {
            "file": "addon/classes/track.js",
            "line": 110,
            "description": "Sets up a `requestAnimationFrame` based loop that updates the\nstartOffset as `audioContext.currentTime` grows.\nLoop ends when `isPlaying` is false.",
            "itemtype": "method",
            "name": "_trackPlayPosition",
            "access": "private",
            "tagname": "",
            "class": "Track",
            "module": "Audio",
            "submodule": "Track"
        },
        {
            "file": "addon/services/audio.js",
            "line": 35,
            "description": "An AudioContext instance from the Web Audio API. **NOT** available in all\nbrowsers. Not available in any version of IE (except EDGE)\nas of April 2016.",
            "itemtype": "property",
            "name": "context",
            "type": "{AudioContext}",
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 45,
            "description": "This acts as a register for Sound instances. Sound instances are placed in\nthe register by name, and can be called via audioService.getSound('name')",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "sounds",
            "type": "{map}",
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 55,
            "description": "This acts as a register for soundfonts. A soundfont is a Map\nwhich is placed in the register by name, and can be called via\naudioService.getFont('name')",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "fonts",
            "type": "{map}",
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 66,
            "description": "This acts as a register for Track instances. Track instances are placed in\nthe register by name, and can be called via audioService.getTrack('name')",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "tracks",
            "type": "{map}",
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 76,
            "description": "This acts as a register for BeatTrack instances. BeatTrack instances are\nplaced in the register by name, and can be called via\naudioService.getBeatTrack('name')",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "beatTracks",
            "type": "{map}",
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 87,
            "description": "Acts as a proxy method, returns a POJO with methods that return the _load and\n_loadFont methods so that in the end, the method signature looks something\nlike:",
            "example": [
                "\n    audio.load('some-uri').asSound('some-name')"
            ],
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "src",
                    "description": "The URI location of an audio file. Will be used by\n\"fetch\" to get the audio file. Can be a local or a relative URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns a POJO that contains a few methods that curry\n\"src\" \"type\" and \"name\" over to\n{{#crossLink \"Audio/_load:method\"}}{{/crossLink}} and\n{{#crossLink \"Audio/_loadFont:method\"}}{{/crossLink}}",
                "type": "Object"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 109,
            "description": "Calls {{#crossLink \"Audio/_load:method\"}}{{/crossLink}} with name,\npartially applied src param from\n{{#crossLink \"Audio/load:method\"}}{{/crossLink}}, and type=\"sound\"",
            "itemtype": "method",
            "name": "asSound",
            "params": [
                {
                    "name": "name",
                    "description": "The name that this Sound instance will be\nregistered as in the \"sounds\" register",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a promise that resolves to a Sound\ninstance. The promise resolves when the Sound instance's AudioBuffer\n(audio data) is finished loading",
                "type": "Promise|Sound"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 125,
            "description": "Calls {{#crossLink \"Audio/_load:method\"}}{{/crossLink}} with name,\npartially applied src param from\n{{#crossLink \"Audio/load:method\"}}{{/crossLink}}, and type=\"track\"",
            "itemtype": "method",
            "name": "asSound",
            "params": [
                {
                    "name": "name",
                    "description": "The name that this Track instance will be\nregistered as in the \"tracks\" register.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a promise that resolves to a Track\ninstance. The promise resolves when the Track instance's AudioBuffer\n(audio data) is finished loading.",
                "type": "Promise|Track"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 142,
            "description": "Calls {{#crossLink \"Audio/_load:method\"}}{{/crossLink}} with name,\npartially applied src param from\n{{#crossLink \"Audio/load:method\"}}{{/crossLink}}, and type=\"beatTrack\"",
            "itemtype": "method",
            "name": "asBeatTrack",
            "params": [
                {
                    "name": "name",
                    "description": "The name that this BeatTrack instance will be\nregistered as in the \"beatTracks\" register",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a promise that resolves to a BeatTrack\ninstance. The promise resolves when the BeatTrack instance's AudioBuffer\n(audio data) is finished loading.",
                "type": "Promise|Track"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 159,
            "description": "Calls {{#crossLink \"Audio/_loadFont:method\"}}{{/crossLink}} with name,\nand partially applied src param from\n{{#crossLink \"Audio/load:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "asFont",
            "params": [
                {
                    "name": "name",
                    "description": "The name that this font will be registered as in\nthe \"fonts\" register.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a promise that resolves to an Array of\nsorted note names. The promise resolves when the soundfont file is\nfinished loading and it's audio data has been successfully decoded.",
                "type": "Promise|array"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 179,
            "description": "Gets a BeatTrack instance by name from the beatTracks register.",
            "itemtype": "method",
            "name": "getBeatTrack",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the BeatTrack instance that you would like\nto retrieve from the beatTracks register.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the BeatTrack instance that matches the\nprovided name.",
                "type": "BeatTrack"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 193,
            "description": "Gets a Sound instance by name from the sounds register",
            "itemtype": "method",
            "name": "getSound",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the sound that you would like to retrieve\nfrom the sounds register.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns the Sound instance that matches the provided name.",
                "type": "Sound"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 206,
            "description": "Gets a Track instance by name from the tracks register",
            "itemtype": "method",
            "name": "getTrack",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the Track instance that you would like to\nretrieve from the tracks register.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the Track instance that matches the provided name.",
                "type": "Track"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 219,
            "description": "Gets a soundfont by name from the fonts register",
            "itemtype": "method",
            "name": "getFont",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the soundfont that you would like to\nretrieve from the fonts register.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the soundfont (an array of Note objects)\nthat matches the provided name.",
                "type": "Ember.Array"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 242,
            "description": "Gets all instances from requested register and calls\n{{#crossLink \"Sound/stop:method\"}}{{/crossLink}} on each\ninstance. Default register is `tracks`.",
            "itemtype": "method",
            "name": "stopAll",
            "params": [
                {
                    "name": "register='tracks'",
                    "description": "The name of the register that you wish\nto stop all instances of",
                    "type": "String"
                }
            ],
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 258,
            "description": "Gets all instances from the tracks register and calls pause() on each. Only\nworks for the tracks register because only Track instances are pause-able",
            "itemtype": "method",
            "name": "pauseAll",
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 270,
            "description": "Gets a register by it's name",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getRegisterFor",
            "params": [
                {
                    "name": "type",
                    "description": "Which register to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Map"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 289,
            "description": "Creates an {{#crossLinkModule \"Audio\"}}Audio Class{{/crossLinkModule}}\ninstance (which is based on which \"type\" is specified), and passes \"props\"\nto the new instance.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createSoundFor",
            "params": [
                {
                    "name": "type",
                    "description": "The type of\n{{#crossLinkModule \"Audio\"}}Audio Class{{/crossLinkModule}} to be created.",
                    "type": "String"
                },
                {
                    "name": "props",
                    "description": "POJO to pass to the new instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Sound|Track|BeatTrack"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 315,
            "description": "Loads and decodes an audio file, creating a Sound, Track, or BeatTrack\ninstance (as determined by the \"type\" parameter) and places the instance\ninto it's corresponding register.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_load",
            "params": [
                {
                    "name": "name",
                    "description": "The name that the created instance should be\nregistered as.",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "The URI location of an audio file. Will be used by\n\"fetch\" to get the audio file. Can be a local or a relative URL",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Determines the type of object that should be created,\nas well as which register the instance should be placed in",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a promise which resolves\nto an instance of a Sound, Track, or BeatTrack",
                "type": "Promise|Sound|Track|BeatTrack"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 357,
            "description": "1. Creates a Map instance (a \"font\") and places it in the fonts register.\n2. Loads a soundfont file and decodes all the notes.\n3. Creates a Note object instance for each note.\n4. Places each note on the font by name.\n5. Returns a promise that resolves to an array of properly sorted Note\nobject instances.\n\nThe notes are sorted the way that they would appear on a piano. A given\nnote can be played as seen in the example:",
            "example": [
                "\n    audio.getFont(fontName).play(noteName)"
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_loadFont",
            "params": [
                {
                    "name": "instrumentName",
                    "description": "The name that you will refer to this sound\nfont by.",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "The URI location of a soundfont file. Will be used by\n\"fetch\" to get the soundfont file. Can be a local or a relative URL.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a promise that resolves when the sound font\nhas been successfully decoded. The promise resolves to an array of sorted note names.",
                "type": "Promise|array"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 416,
            "description": "Takes an array of base64 encoded strings (notes) and returns an array of\narrays like [[name, audio], [name, audio]]",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_extractDecodedKeyValuePairs",
            "params": [
                {
                    "name": "notes",
                    "description": "Array of base64 encoded strings.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns an Array of arrays. Each inner array has two\nvalues, `[noteName, decodedAudio]`.",
                "type": "Array"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/services/audio.js",
            "line": 452,
            "description": "Takes an array of arrays, each inner array acting as\na key-value pair in the form `[noteName, audioData]`. Each inner array is\ntransformed into a {{#crossLink \"Note\"}}{{/crossLink}} and the outer array\nis returned. This method also sets each note on it's corresponding\ninstrument {{#crossLink \"Map\"}}{{/crossLink}} instance by name. Each note\nis playable as seen in the example.",
            "example": [
                "\n    audioService.get('fonts').get('instrument-name').play('Ab5');"
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createNoteObjects",
            "params": [
                {
                    "name": "audioData",
                    "description": "Array of arrays, each inner array like\n`[noteName, audioData]`.",
                    "type": "Array"
                },
                {
                    "name": "instrumentName",
                    "description": "Name of the instrument each note belongs to.\nThis is the name that will be used to identify the instrument on the fonts\nregister.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns an Array of {{#crossLink \"Note\"}}Notes{{/crossLink}}",
                "type": "Array"
            },
            "class": "Audio",
            "module": "Audio-Service"
        },
        {
            "file": "addon/utils/array-methods.js",
            "line": 12,
            "description": "Given an array and an index, splits the array at index and pushes the first\nchunk to the end of the second chunk.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "arraySwap",
            "params": [
                {
                    "name": "arr",
                    "description": "An array to split, shift and rejoin.",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "The index where the split should occur.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The swapped/shifted array.",
                "type": "Array"
            },
            "class": "utils",
            "module": "Audio-Service"
        },
        {
            "file": "addon/utils/array-methods.js",
            "line": 28,
            "description": "Flattens an array of arrays into a shallow array.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "flatten",
            "params": [
                {
                    "name": "arr",
                    "description": "An array to flatten.",
                    "type": "ArrayOfArrays"
                }
            ],
            "return": {
                "description": "The flattened array.",
                "type": "Array"
            },
            "class": "utils",
            "module": "Audio-Service"
        },
        {
            "file": "addon/utils/decode-base64.js",
            "line": 6,
            "description": "Converts a base64 string into a Uint8Array of \"binary\" data.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "base64ToUint8",
            "params": [
                {
                    "name": "base64String",
                    "description": "The base64 string that you'd like to be converted.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A Uint8Array of converted \"binary\" audio data.",
                "type": "Uint8Array"
            },
            "class": "utils",
            "module": "Audio-Service"
        },
        {
            "file": "addon/utils/decode-base64.js",
            "line": 38,
            "description": "Strips extraneous stuff from a soundfont and splits the soundfont into a JSON\nobject. Keys are note names and values are base64 encoded strings.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "mungeSoundFont",
            "params": [
                {
                    "name": "soundfont",
                    "description": "A soundfont as a long base64 string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A JSON representation of all the notes in the font",
                "type": "Object"
            },
            "class": "utils",
            "module": "Audio-Service"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 13,
            "description": "Sorts an array of {{#crossLink \"Note\"}}Notes{{/crossLink}} so that they are in the same order that they would\nappear on a piano.",
            "params": [
                {
                    "name": "notes",
                    "description": "An array of notes that should be musically-sorted.",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "sortNotes",
            "return": {
                "description": "Array of musically-sorted notes.",
                "type": "Array"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 44,
            "description": "Takes an array of arrays of notes, determines the last note of\nthe first array, then splits the rest of the arrays in the array at the last\nnote of the first array, and moves the beginning of the array to the end\nso that each array starts at the next note after the last note of the first\narray, instead of at \"A\" (alphabetically).",
            "example": [
                "\n    This is hard to explain. Here's an example.\n    (Simplified, as the real notes are objects)\n\n    Example input: [['A0', 'B0'], ['A1', 'B1', 'C1', 'D1']]\n    Example output: [['A0', 'B0'], ['C1', 'D1', 'A1', 'B1']]"
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "octaveShift",
            "params": [
                {
                    "name": "octaves",
                    "description": "An array of octaves, each octave is an array of Notes.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Input array after having been shifted.",
                "type": "Array"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 81,
            "description": "Maps through an array of arrays and sorts each array with\n\"noteSort\"",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "octaveSort",
            "params": [
                {
                    "name": "octaves",
                    "description": "array of arrays to be sorted",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of sorted arrays",
                "type": "Array"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 96,
            "description": "Accepts an array of Note objects and passes back an array\nlike this: [original array, array of each octave in the orginal array]",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "extractOctaves",
            "params": [
                {
                    "name": "notes",
                    "description": "array of note objects.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array containing two inner arrays, [0] is the untouched input\narray, [1] is an array of all the octaves in the original array.",
                "type": "Array"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 112,
            "description": "Accepts an array of two arrays and returns the same\narray, but with array at index [1] uniq'd and sorted alphabetically.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "stripDuplicateOctaves",
            "params": [
                {
                    "name": "notes, octaves",
                    "description": "the output from extractOctaves.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The mutated array.",
                "type": "Array"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 127,
            "description": "Accepts an array of two arrays, [0] being an array\nof Note objects, [1] being all the available octaves. Returns a single array\nmade up of arrays of Note objects, organized by octave. Each inner array\nrepresents all of the notes in an octave.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "createOctavesWithNotes",
            "params": [
                {
                    "name": "data",
                    "description": "The output of stripDuplicateOctaves.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.MutableArray"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/note-methods.js",
            "line": 144,
            "description": "Acts as a comparator function for javascript's array sort() method.\nSorts two {{#crossLink \"Note\"}}{{/crossLink}} instances alphabetically, flats\nbefore naturals.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "noteSort",
            "params": [
                {
                    "name": "a",
                    "description": "The first Note instance to compare.",
                    "type": "Note"
                },
                {
                    "name": "b",
                    "description": "The second Note instance to compare.",
                    "type": "Note"
                }
            ],
            "return": {
                "description": "-1 or 1, depending on whether the current\n{{#crossLink \"Note\"}}{{/crossLink}} instance should be sorted left, or right.",
                "type": "Number"
            },
            "class": "utils",
            "module": "utils"
        },
        {
            "file": "addon/utils/zeroify.js",
            "line": 6,
            "description": "Formats a number and converts to string: 6 becomes '06'",
            "itemtype": "method",
            "name": "zeroify",
            "params": [
                {
                    "name": "input",
                    "description": "A number that should be formatted",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The number formatted and converted to string",
                "type": "String"
            },
            "class": "utils",
            "module": "utils"
        }
    ],
    "warnings": []
}