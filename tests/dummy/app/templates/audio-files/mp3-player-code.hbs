<div class="content">
  <h2>MP3 Player Code</h2>

  {{#code-block language='handlebars'}}
  \{{!-- purely aesthetic stuff has been removed, see dummy app in repo if you're interested --}}

  &lt;div class="play-pause \{{if isPlaying 'playing'}}" \{{action (if isPlaying 'pause' 'play')}}>&lt;/div>
  &lt;div class="time current">\{{position.string}}&lt;/div>

  &lt;div class="bar" onclick=\{{action 'seek'}}>
    &lt;div class="played" style=\{{percentPlayed}}>&lt;/div>
  &lt;/div>

  &lt;div class="time duration">\{{duration.string}}&lt;/div>

  &lt;div class="volume" onclick=\{{action 'changeVolume'}}>
    &lt;div style=\{{percentGain}}>&lt;/div>
  &lt;/div>
  {{/code-block}}

  {{#code-block language='javascript'}}
  import Ember from 'ember';
  import getProp from 'ember-audio/utils/get-prop';

  export default Ember.Whatever.extend({
    audio: Ember.inject.service(),
    selectedTrack: null,
    isPlaying: false,

    // There are two mp3 files in my public folder: "barely-there.mp3" and "do-wah-diddy.mp3"
    tracks: [
      {
        name: 'barely-there',
        promise: null,
        description: 'a description here...'
      },
      {
        name: 'do-wah-diddy',
        promise: null,
        description: 'a description here...'
      }
    ],

    // getProp() is a computed property macro that lets you get a property
    // directly from a Track (more info in the API docs and code walkthrough)
    duration: getProp('duration').fromTrack('selectedTrack.name'),

    // the fromTrack() part accepts an optional callback
    percentPlayed: getProp('percentPlayed').fromTrack('selectedTrack.name', function(percentPlayed) {
      return Ember.String.htmlSafe(`width: ${percentPlayed}%;`);
    }),

    percentGain: getProp('percentGain').fromTrack('selectedTrack.name', function(percentGain) {
      return Ember.String.htmlSafe(`height: ${percentGain}%;`);
    }),

    actions: {
      selectTrack(track) {
        const audio = this.get('audio');

        this.set('isPlaying', false);
        audio.pauseAll();

        // We will use the returned promise to ensure the sound is loaded before it is played
        track.promise = audio.load(`${track.name}.mp3`).asTrack(track.name);
        this.set('selectedTrack', track);
      },

      play() {
        this.get('selectedTrack.promise').then((track) => {
          this.set('isPlaying', true);
          track.play();
        });
      },

      pause() {
        const trackName = this.get('selectedTrack.name');
        this.set('isPlaying', false);
        this.get('audio').getTrack(trackName).pause();
      },

      seek(e) {
        const audio = this.get('audio');
        const trackName = this.get('selectedTrack.name');

        const newPosition = // get new seek position from UI, see the code walkthrough

        audio.getTrack(trackName).seek(newPosition).from('ratio');
      },

      changeVolume(e) {
        const audio = this.get('audio');
        const trackName = this.get('selectedTrack.name');

        const newGain = // get `gain` from the UI, see the code walkthrough

        audio.getTrack(trackName).changeGain(newGain).from('inverseRatio');
      }
    }
  });
  {{/code-block}}
</div>
