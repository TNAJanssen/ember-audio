<div class="content">
  <h2>MP3 Player Code</h2>

  {{#code-block language='handlebars'}}
  \{{!-- purely aesthetic stuff has been removed, see dummy app in repo if you're interested --}}

  &lt;div class="play-pause \{{if isPlaying 'playing'}}" \{{action (if isPlaying 'pause' 'play')}}>&lt;/div>
  &lt;div class="time current">\{{position.string}}&lt;/div>

  &lt;div class="bar" onclick=\{{action 'seek'}}>
    &lt;div class="played" style=\{{percentPlayed}}>&lt;/div>
  &lt;/div>

  &lt;div class="time duration">\{{duration.string}}&lt;/div>

  &lt;div class="volume" onclick=\{{action 'changeVolume'}}>
    &lt;div style=\{{percentGain}}>&lt;/div>
  &lt;/div>
  {{/code-block}}

  {{#code-block language='javascript'}}
  import Ember from 'ember';
  import getProp from 'ember-audio/utils/get-prop-from-sound';

  export default Ember.Whatever.extend({
    audio: Ember.inject.service(),
    selectedTrack: null,
    isPlaying: false,

    // There are two mp3 files in my public folder: "barely-there.mp3" and "do-wah-diddy.mp3"
    tracks: [
      {
        name: 'barely-there',
        description: 'a description here...'
      },
      {
        name: 'do-wah-diddy',
        description: 'a description here...'
      }
    ],

    // getProp() is a computed property macro that lets you get a property
    // directly from a "Sound" (more info in code walkthrough)
    duration: getProp('duration').fromSound('selectedTrack.name'),
    position: getProp('position').fromSound('selectedTrack.name'),

    // the fromSound() part accepts an optional callback
    percentPlayed: getProp('percentPlayed').fromSound('selectedTrack.name', function(percentPlayed) {
      return Ember.String.htmlSafe(`width: ${percentPlayed}%;`);
    }),

    percentGain: getProp('percentGain').fromSound('selectedTrack.name', function(percentGain) {
      return Ember.String.htmlSafe(`height: ${percentGain}%;`);
    }),

    actions: {
      selectTrack(track) {
        // Passing 'track' as the third param because we want a "Track" instance, not a "Sound"
        const promise = this.get('audio').load(trackName, `${trackName}.mp3`, 'track');

        // We will use the returned promise to ensure the sound is loaded before it is played
        track.promise = promise;
        this.set('selectedTrack', track);
      },

      play() {
        const track = this.get('selectedTrack');

        track.promise.then(() => {
          this.set('isPlaying', true);
          this.get('audio').play(track.name);
        });
      },

      pause() {
        const trackName = this.get('selectedTrack.name');
        this.get('audio').pause(trackName);
        this.set('isPlaying', false);
      },

      seek(e) {
        const trackName = this.get('selectedTrack.name');
        const newPosition = // a bunch of code to get the new seek position, see the code walkthrough

        // seek() can handle a ratio, a percentage, or seconds.
        this.get('audio').getSound(trackName).seek(newPosition).from('ratio');
      },

      changeVolume(e) {
        const trackName = this.get('selectedTrack.name');
        const newGain = // a bunch of code to get `gain` from the UI, see the code walkthrough

        this.get('audio').getSound(trackName).changeGain(newGain);
      }
    }
  });
  {{/code-block}}
</div>
