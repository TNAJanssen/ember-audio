<div class="content">
  <h2>Audio Routing</h2>

  <button class="btn btn-primary" {{action 'playSound'}}>Play Sound</button>
  <button class="btn {{if distortionEnabled 'btn-warning' 'btn-success'}}" {{action 'toggleDistortion'}}>
    Turn {{if distortionEnabled 'Off' 'On'}} Distortion
  </button>
</div>

<div class="content">
  <p>
    The signal path in the Web Audio API works by allowing you to stitch
    together various audio "nodes", similarly to real life audio equipment.
  </p>
</div>

<div class="content">
  <p>
    By default, a <code>Sound</code> instance is routed through 4 audio nodes:
  </p>

  <ol>
    <li>
      <code>Source</code> - A node that outputs some type of audio data. The
      audio data could be a sound loaded from a file, a synthesizer oscillator,
      or input from a user's microphone.
    </li>
    <li>
      <code>Gain</code> - A node that allows you to control the gain of the
      audio data that is streaming from the source node.
    </li>
    <li>
      <code>Panner</code> - A node that allows you to control the stereo pan
      position of the audio data that is streaming from the gain node.
    </li>
    <li>
      <code>Destination</code> - A node that routes the audio data that is
      streaming from the panner node to the output of a user's computer.
    </li>
  </ol>
</div>

<div class="content">
  <p>
    The nodes are connected automatically, in the same order that they exist
    in the <code>connections</code> array. For the example above (the default
    case) they are connected like: <code>Source</code> -> <code>Gain</code>
    -> <code>Panner</code> -> <code>Destination</code>
  </p>
</div>

<div class="content">
  <p>
    It is possible to customize routing by adding and removing audio nodes from
    a <code>Sound</code> instance's <code>connections</code> array.
  </p>

  <p>
    The <code>connections</code> array is an <code>Ember.MutableArray</code>
    so it is easily manipulated using it's prototype methods such as
    <code>insertAt</code> and <code>removeAt</code>.
  </p>

  <p>
    A <code>Sound</code> instance also has a convenience method called
    <code>removeConnection</code> that allows you to remove a connection by it's
    <code>name</code>.
  </p>
</div>

<div class="content">
  {{#code-block language='handlebars'}}
  &lt;button class="btn btn-primary" \{{action 'playSound'}}>Play Sound&lt;/button>
  &lt;button class="btn \{{if distortionEnabled 'btn-warning' 'btn-success'}}" \{{action 'toggleDistortion'}}>
    Turn \{{if distortionEnabled 'Off' 'On'}} Distortion
  &lt;/button>
  {{/code-block}}

  {{#code-block language='javascript'}}
  export default Ember.Whatever.extend({
    audio: Ember.inject.service(),

    initAudioFile: Ember.on('init', function() {
      // Eb5.mp3 is an mp3 file located in the "public" folder
      this.get('audio').load('Eb5.mp3').asSound('piano-note').then((note) => {
        this.set('note', note);
      });
    }),

    distortionEnabled: Ember.computed('note.connections.[]', function() {
      const note = this.get('note');

      if (note) {
        return !!note.getNode('distortionNode');
      }
    }),

    _makeDistortionCurve(amount) {
      // I stole this straight from the Mozilla Web Audio API docs site
      const k = typeof amount === 'number' ? amount : 50;
      const n_samples = 44100;
      const curve = new Float32Array(n_samples);
      const deg = Math.PI / 180;
      let x;

      for (let i = 0; i &lt; n_samples; ++i) {
        x = i * 2 / n_samples - 1;
        curve[i] = ( 3 + k ) * x * 20 * deg / ( Math.PI + k * Math.abs(x) );
      }

      return curve;
    },

    _addDistortion() {
      const distortion = this.get('audio.context').createWaveShaper();

      distortion.curve = this._makeDistortionCurve(400);
      distortion.oversample = '4x';

      // Create the audio node and insert it directly into the connections array
      // Check the API docs for other ways to add connections
      this.get('note.connections').insertAt(1, {
        name: 'distortionNode',
        node: distortion
      });

      // Reduce gain since the distorted sound has a much higher perceived volume
      this.get('note').changeGainTo(0.1).from('ratio');
    },

    _removeDistortion() {
      // In this case, we know the index of distortionNode for sure, if we didn't,
      // "this.get('note').removeConnection('distortionNode')" would also work
      this.get('note.connections').removeAt(1);
    },

    actions: {
      playSound() {
        this.get('note').play();
      },

      toggleDistortion() {
        if (this.get('distortionEnabled')) {
          this._removeDistortion();
        } else {
          this._addDistortion();
        }
      }
    }
  });
  {{/code-block}}
</div>
