<div class="content">
  <h2>Audio Routing</h2>
  <button class="btn btn-primary" {{action 'playSound'}}>Play Sound</button>
  <button class="btn {{if distortionEnabled 'btn-warning' 'btn-success'}}" {{action 'toggleDistortion'}}>
    Turn {{if distortionEnabled 'Off' 'On'}} Distortion
  </button>
</div>

<div class="content">
  {{#code-block language='handlebars'}}
  &lt;button class="btn btn-primary" \{{action 'playSound'}}>Play Sound&lt;/button>
  &lt;button class="btn \{{if distortionEnabled 'btn-warning' 'btn-success'}}" \{{action 'toggleDistortion'}}>
    Turn \{{if distortionEnabled 'Off' 'On'}} Distortion
  &lt;/button>
  {{/code-block}}
</div>

<div class="content">
  {{#code-block language='javascript'}}
  export default Ember.Whatever.extend({
    audio: Ember.inject.service(),

    initAudioFile: Ember.on('init', function() {
      // Eb5.mp3 is an mp3 file located in the "public" folder
      this.get('audio').load('Eb5.mp3').asSound('piano-note').then((note) => {
        this.set('note', note);
      });
    }),

    distortionEnabled: Ember.computed('note.connections.[]', function() {
      const note = this.get('note');

      if (note) {
        return !!note.getNode('distortionNode');
      }
    }),

    _makeDistortionCurve(amount) {
      // I stole this straight from the Mozilla Web Audio API docs site
      const k = typeof amount === 'number' ? amount : 50;
      const n_samples = 44100;
      const curve = new Float32Array(n_samples);
      const deg = Math.PI / 180;
      let x;

      for (let i = 0; i &lt; n_samples; ++i) {
        x = i * 2 / n_samples - 1;
        curve[i] = ( 3 + k ) * x * 20 * deg / ( Math.PI + k * Math.abs(x) );
      }

      return curve;
    },

    _addDistortion() {
      const distortion = this.get('audio.context').createWaveShaper();

      distortion.curve = this._makeDistortionCurve(400);
      distortion.oversample = '4x';

      // Create the audio node and insert it directly into the connections array
      // Check the API docs for other ways to add connections
      this.get('note.connections').insertAt(1, {
        name: 'distortionNode',
        node: distortion
      });

      // Reduce gain since the distorted sound has much more apparent volume
      this.get('note').changeGainTo(0.1).from('ratio');
    },

    _removeDistortion() {
      this.get('note').removeNode('distortionNode');
    },

    actions: {
      playSound() {
        this.get('note').play();
      },

      toggleDistortion() {
        if (this.get('distortionEnabled')) {
          this._removeDistortion();
        } else {
          this._addDistortion();
        }
      }
    }
  });
  {{/code-block}}
</div>
